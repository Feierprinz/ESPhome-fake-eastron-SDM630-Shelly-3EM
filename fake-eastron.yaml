esphome:
  name: energy-meter-bridge
  friendly_name: Energy meter bridge

esp32:
  board: wemos_d1_mini32
  framework:
    type: arduino

# Enable logging
logger:
  level: INFO

# Enable Home Assistant API
api:
  encryption:
    key: "..."

ota:
  password: "..."

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Fallback Hotspot"
    password: "efdOuVuDJPPo"

captive_portal:

time:
  - platform: homeassistant

external_components:
  - source: github://hankipanky/esphome-fake-eastron-SDM630
    refresh: 60s
    components:
      - modbus_server

uart:
  - id: intmodbus
    tx_pin: 17 # brown
    rx_pin: 16 # white
    baud_rate: 9600
    stop_bits: 1
    data_bits: 8
    parity: NONE
    debug:
      direction: BOTH

http_request:
  id: http_request_data
  useragent: esphome/meter-bridge
  timeout: 10s

modbus_server:
  - id: modbusserver
    uart_id: intmodbus
    address: 2 # slave address
#    re_pin: 18 # enable if needed
#    de_pin: 5 # enable if needed
    input_registers:
      - start_address: 00
        default: 0
        number: 72
        on_read: |
          ESP_LOGD("read-modbus", "Returning register address=%d, value=0x%04x", address, value);
          return value;
      - start_address: 200
        default: 0
        number: 6
        on_read: |
          ESP_LOGD("read-modbus", "Returning unsupported register address=%d, value=0x%04x", address, value);
          return value;
      - start_address: 342
        default: 0
        number: 2
        on_read: |
          ESP_LOGD("read-modbus", "Returning register address=%d, value=0x%04x", address, value);
          return value;

interval:
  - interval: 1s
    then:
      - http_request.get:
          url: http://shellypro3em/rpc/EM.GetStatus?id=0
          on_response: 
            then:
              - lambda: |-
                  json::parse_json(id(http_request_data).get_string(), [](JsonObject root) {
                      // setting modbusserver registers
                      // use https://www.h-schmidt.net/FloatConverter/IEEE754.html to doublecheck conversions

                      // convert from float to 2 uint16_t. 
                      union 
                      {
                      uint16_t x_int[2];
                      float x_f;
                      } u;

                      // register 0: phase A voltage
                      u.x_f = root["a_voltage"];
                      id(modbusserver)->write_input_register(0, u.x_int[1]);
                      id(modbusserver)->write_input_register(1, u.x_int[0]);
                      ESP_LOGD("read-shelly", "Registers for phase A voltage %f set to: 0x%04x and 0x%04x", u.x_f, u.x_int[1], u.x_int[0]);
                      // register 2: phase B voltage
                      u.x_f = root["b_voltage"];
                      id(modbusserver)->write_input_register(2, u.x_int[1]);
                      id(modbusserver)->write_input_register(3, u.x_int[0]);
                      ESP_LOGD("read-shelly", "Registers for phase B voltage %f set to: 0x%04x and 0x%04x", u.x_f, u.x_int[1], u.x_int[0]);
                      // register 4: phase C voltage
                      u.x_f = root["c_voltage"];
                      id(modbusserver)->write_input_register(4, u.x_int[1]);
                      id(modbusserver)->write_input_register(5, u.x_int[0]);
                      ESP_LOGD("read-shelly", "Registers for phase C voltage %f set to: 0x%04x and 0x%04x", u.x_f, u.x_int[1], u.x_int[0]);

                      // register 6: phase A current
                      u.x_f = root["a_current"];
                      id(modbusserver)->write_input_register(6, u.x_int[1]);
                      id(modbusserver)->write_input_register(7, u.x_int[0]);
                      ESP_LOGD("read-shelly", "Registers for phase A current %f set to: 0x%04x and 0x%04x", u.x_f, u.x_int[1], u.x_int[0]);
                      // register 8: phase B current
                      u.x_f = root["b_current"];
                      id(modbusserver)->write_input_register(8, u.x_int[1]);
                      id(modbusserver)->write_input_register(9, u.x_int[0]);
                      ESP_LOGD("read-shelly", "Registers for phase B current %f set to: 0x%04x and 0x%04x", u.x_f, u.x_int[1], u.x_int[0]);
                      // register 10: phase C current
                      u.x_f = root["c_current"];
                      id(modbusserver)->write_input_register(10, u.x_int[1]);
                      id(modbusserver)->write_input_register(11, u.x_int[0]);
                      ESP_LOGD("read-shelly", "Registers for phase C current %f set to: 0x%04x and 0x%04x", u.x_f, u.x_int[1], u.x_int[0]);

                      // register 12: phase A power
                      u.x_f = root["a_act_power"];
                      u.x_f = u.x_f - 20; // adjust by 20W
                      id(modbusserver)->write_input_register(12, u.x_int[1]);
                      id(modbusserver)->write_input_register(13, u.x_int[0]);
                      ESP_LOGD("read-shelly", "Registers for phase A power %f set to: 0x%04x and 0x%04x", u.x_f, u.x_int[1], u.x_int[0]);
                      // register 14: phase B power
                      u.x_f = root["b_act_power"];
                      u.x_f = u.x_f - 20; // adjust by 20W
                      id(modbusserver)->write_input_register(14, u.x_int[1]);
                      id(modbusserver)->write_input_register(15, u.x_int[0]);
                      ESP_LOGD("read-shelly", "Registers for phase B power %f set to: 0x%04x and 0x%04x", u.x_f, u.x_int[1], u.x_int[0]);
                      // register 16: phase C power
                      u.x_f = root["c_act_power"];
                      u.x_f = u.x_f - 20; // adjust by 20W
                      id(modbusserver)->write_input_register(16, u.x_int[1]);
                      id(modbusserver)->write_input_register(17, u.x_int[0]);
                      ESP_LOGD("read-shelly", "Registers for phase C power %f set to: 0x%04x and 0x%04x", u.x_f, u.x_int[1], u.x_int[0]);
                      
                      // register 18: phase A apparent power
                      u.x_f = root["a_aprt_power"];
                      u.x_f = u.x_f - 20; // adjust by 20W
                      id(modbusserver)->write_input_register(18, u.x_int[1]);
                      id(modbusserver)->write_input_register(19, u.x_int[0]);
                      ESP_LOGD("read-shelly", "Registers for phase A apparent power %f set to: 0x%04x and 0x%04x", u.x_f, u.x_int[1], u.x_int[0]);
                      // register 20: phase B apparent power
                      u.x_f = root["b_aprt_power"];
                      u.x_f = u.x_f - 20; // adjust by 20W
                      id(modbusserver)->write_input_register(20, u.x_int[1]);
                      id(modbusserver)->write_input_register(21, u.x_int[0]);
                      ESP_LOGD("read-shelly", "Registers for phase B apparent power %f set to: 0x%04x and 0x%04x", u.x_f, u.x_int[1], u.x_int[0]);
                      // register 22: phase C apparent power
                      u.x_f = root["c_aprt_power"];
                      u.x_f = u.x_f - 20; // adjust by 20W
                      id(modbusserver)->write_input_register(22, u.x_int[1]);
                      id(modbusserver)->write_input_register(23, u.x_int[0]);
                      ESP_LOGD("read-shelly", "Registers for phase C apparent power %f set to: 0x%04x and 0x%04x", u.x_f, u.x_int[1], u.x_int[0]);

                      // register 24: phase A reactive power
                      // register 26: phase B reactive power
                      // register 28: phase C reactive power

                      // Calculate power factor according to IEC
                      float act_power;
                      float aprt_power;
                      
                      // register 30: phase A power factor
                      // u.x_f = root["a_pf"];
                      act_power = root["a_act_power"];
                      aprt_power = root["a_aprt_power"];
                      u.x_f = act_power / aprt_power;
                      id(modbusserver)->write_input_register(30, u.x_int[1]);
                      id(modbusserver)->write_input_register(31, u.x_int[0]);
                      ESP_LOGD("read-shelly", "Registers for phase A power factor %f set to: 0x%04x and 0x%04x", u.x_f, u.x_int[1], u.x_int[0]);
                      // register 32: phase B power factor
                      // u.x_f = root["b_pf"];
                      act_power = root["b_act_power"];
                      aprt_power = root["b_aprt_power"];
                      u.x_f = act_power / aprt_power;
                      id(modbusserver)->write_input_register(32, u.x_int[1]);
                      id(modbusserver)->write_input_register(33, u.x_int[0]);
                      ESP_LOGD("read-shelly", "Registers for phase B power factor %f set to: 0x%04x and 0x%04x", u.x_f, u.x_int[1], u.x_int[0]);
                      // register 34: phase C power factor
                      // u.x_f = root["c_pf"];
                      act_power = root["c_act_power"];
                      aprt_power = root["c_aprt_power"];
                      u.x_f = act_power / aprt_power;
                      id(modbusserver)->write_input_register(34, u.x_int[1]);
                      id(modbusserver)->write_input_register(35, u.x_int[0]);
                      ESP_LOGD("read-shelly", "Registers for phase C power factor %f set to: 0x%04x and 0x%04x", u.x_f, u.x_int[1], u.x_int[0]);

                      // register 48: Sum of line currents
                      u.x_f = root["total_current"];
                      id(modbusserver)->write_input_register(48, u.x_int[1]);
                      id(modbusserver)->write_input_register(49, u.x_int[0]);
                      ESP_LOGD("read-shelly", "Registers for Sum of line currents %f set to: 0x%04x and 0x%04x", u.x_f, u.x_int[1], u.x_int[0]);
                      // register 52: Total system power
                      u.x_f = root["total_act_power"];
                      id(modbusserver)->write_input_register(52, u.x_int[1]);
                      id(modbusserver)->write_input_register(53, u.x_int[0]);
                      ESP_LOGD("read-shelly", "Registers for Total system power %f set to: 0x%04x and 0x%04x", u.x_f, u.x_int[1], u.x_int[0]);
                      // register 56: Total system volt amps
                      u.x_f = root["total_aprt_power"];
                      id(modbusserver)->write_input_register(56, u.x_int[1]);
                      id(modbusserver)->write_input_register(57, u.x_int[0]);
                      ESP_LOGD("read-shelly", "Registers for Total system volt amps %f set to: 0x%04x and 0x%04x", u.x_f, u.x_int[1], u.x_int[0]);

                      // register 70: Frequency of supply voltages
                      u.x_f = root["a_freq"];
                      id(modbusserver)->write_input_register(70, u.x_int[1]);
                      id(modbusserver)->write_input_register(71, u.x_int[0]);
                      ESP_LOGD("read-shelly", "Registers for Frequency of supply voltages %f set to: 0x%04x and 0x%04x", u.x_f, u.x_int[1], u.x_int[0]);

                  });
      - http_request.get:
          url: http://shellypro3em/rpc/EMData.GetStatus?id=0
          on_response: 
            then:
              - lambda: |-
                  json::parse_json(id(http_request_data).get_string(), [](JsonObject root) {
                      // setting modbusserver registers
                      // use https://www.h-schmidt.net/FloatConverter/IEEE754.html to doublecheck conversions

                      // convert from float to 2 uint16_t. 
                      union 
                      {
                      uint16_t x_int[2];
                      float x_f;
                      } u;

                      // register 342: Total kwh
                      u.x_f = root["total_act"];
                      id(modbusserver)->write_input_register(342, u.x_int[1]);
                      id(modbusserver)->write_input_register(343, u.x_int[0]);
                      ESP_LOGD("read-shelly", "Registers for Total kwh %f set to: 0x%04x and 0x%04x", u.x_f, u.x_int[1], u.x_int[0]);
                  });
                  
                  
